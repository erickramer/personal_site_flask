name: Deploy to Google App Engine

on:
  # Trigger deployment only when pushing to the master branch
  push:
    branches: [ master ]
  
  # Allow manual deployment
  workflow_dispatch:

jobs:
  test-and-deploy:
    name: Test and Deploy to Google App Engine
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install backend dependencies
      run: |
        # Create virtual environment
        uv venv
        # Install mock TensorFlow for CI environment
        uv pip install tensorflow-cpu>=2.12.0 --system
        # Install the package with dev dependencies
        uv pip install -e ".[dev]" --system
    
    - name: Create Mock ML Model
      run: |
        mkdir -p data
        # Create a dummy model file for testing
        uv pip install h5py --system
        python -c "import h5py; f = h5py.File('data/model.h5', 'w'); f.close()"
    
    - name: Run backend tests
      run: |
        pytest
    
    - name: Set up Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
        cache-dependency-path: frontend/package.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test
    
    - name: Install Elm
      run: npm install -g elm
    
    - name: Build and optimize frontend assets
      run: |
        cd frontend
        npm run build
        # Only copy necessary files to static
        rm -rf ../static/dist
        mkdir -p ../static/dist
        cp -r dist/css ../static/dist/
        cp -r dist/js ../static/dist/
        cp -r dist/*.html ../static/dist/ 2>/dev/null || true
        cp -r dist/*.ico ../static/dist/ 2>/dev/null || true
    
    - name: Build Elm assets
      run: |
        elm make elm/Home.elm --output=static/js/home.js --optimize
        elm make elm/Asteroids.elm --output=static/js/asteroids.js --optimize
    
    - name: Install production dependencies
      run: |
        uv pip install -r requirements.txt --system
    
    - name: Authenticate with Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        create_credentials_file: true
        export_environment_variables: true
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: ">= 363.0.0"
        project_id: ${{ secrets.GCP_PROJECT_ID }}
      
    - name: Verify service account permissions
      run: |
        echo "Using service account: $(gcloud config get-value account)"
        gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_ID }} --filter="bindings.members:$(gcloud config get-value account)" --format="value(bindings.role)"
      
    - name: Check and create App Engine application
      run: |
        # Check if App Engine app exists
        if ! gcloud app describe --project ${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
          echo "App Engine application does not exist. Creating..."
          # You need to choose a region - us-central is a common choice
          gcloud app create --region=us-central --project=${{ secrets.GCP_PROJECT_ID }}
        else
          echo "App Engine application already exists."
        fi
    
    - name: Update app.yaml with instance limits
      run: |
        # Check if automatic_scaling.max_instances is already in app.yaml
        if ! grep -q "automatic_scaling:" app.yaml || ! grep -q "max_instances:" app.yaml; then
          echo "Adding automatic_scaling.max_instances to app.yaml"
          # Add automatic_scaling section if it doesn't exist
          if ! grep -q "automatic_scaling:" app.yaml; then
            echo "" >> app.yaml
            echo "automatic_scaling:" >> app.yaml
          fi
          # Add max_instances if it doesn't exist
          if ! grep -q "max_instances:" app.yaml; then
            echo "  max_instances: 20" >> app.yaml
          fi
        fi
        cat app.yaml
    
    - name: Deploy to App Engine
      id: deploy
      run: |
        # Print current auth info for debugging
        echo "Current auth account: $(gcloud auth list --filter=status:ACTIVE --format='value(account)')"
        
        # Deploy without trying to impersonate the service account
        gcloud app deploy app.yaml --project ${{ secrets.GCP_PROJECT_ID }} --quiet
    
    - name: Print deployment URL
      run: |
        echo "Deployed to https://${{ secrets.GCP_PROJECT_ID }}.appspot.com"